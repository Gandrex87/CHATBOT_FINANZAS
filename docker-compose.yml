# # docker-compose.yml

# # #PRODUCCION - SERVIDOR
# services:
#   qdrant:
#     image: qdrant/qdrant:latest
#     ports:
#       - "6333:6333"
#     volumes:
#       - qdrant_data:/qdrant/storage
#     restart: always

#   ingestor:
#     build:
#       context: .
#       dockerfile: Dockerfile.backend
#     command: python ingest.py
#     environment:
#       - QDRANT_URL=http://qdrant:6333
#       # --- CAMBIO CLAVE ---
#       - OLLAMA_BASE_URL=http://10.1.0.176:11434
#     depends_on:
#       - qdrant

#   backend:
#     build:
#       context: .
#       dockerfile: Dockerfile.backend
#     ports:
#       - "8000:8000"
#     environment:
#       - QDRANT_URL=http://qdrant:6333
#       # --- Y TAMBIÉN AQUÍ ---
#       - OLLAMA_BASE_URL=http://10.1.0.176:11434
#     depends_on:
#       - ingestor
#     restart: always

#   frontend:
#     build:
#       context: .
#       dockerfile: Dockerfile.frontend
#     ports:
#       - "8501:8501"
#     environment:
#       - API_URL=http://backend:8000/chat
#     depends_on:
#       - backend
#     restart: always

# volumes:
#   qdrant_data:

services:
  # --------------------------------------------------------------------
  # 1. AÑADIMOS EL SERVICIO TRAEFIK
  # --------------------------------------------------------------------
  traefik:
    image: traefik:v2.10
    command:
      - "--api.insecure=true"         # Activa el dashboard de Traefik en el puerto 8080
      - "--providers.docker=true"     # Permite que Traefik detecte otros contenedores
      - "--providers.docker.exposedbydefault=false" # Solo expone contenedores que le indiquemos
      - "--entrypoints.web.address=:80" # Establece el puerto 80 como punto de entrada
    ports:
      - "80:80"     # Puerto para el tráfico web
      - "8080:8080" # Puerto para el dashboard
    volumes:
      # Permite a Traefik escuchar los eventos de Docker
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - proxy       # Conecta Traefik a nuestra red
    restart: always

  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    restart: always

  ingestor:
    build:
      context: .
      dockerfile: Dockerfile.backend
    command: python ingest.py
    environment:
      - QDRANT_URL=http://qdrant:6333
      - OLLAMA_BASE_URL=http://10.1.0.176:11434
    depends_on:
      - qdrant

  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    ports:
      - "8000:8000"
    environment:
      - QDRANT_URL=http://qdrant:6333
      - OLLAMA_BASE_URL=http://10.1.0.176:11434
    depends_on:
      - ingestor
    restart: always

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    # --- 2. ELIMINAMOS EL PUERTO. TRAEFIK SE ENCARGA DE ÉL ---
    # ports:
    #   - "8501:8501"
    environment:
      - API_URL=http://backend:8000/chat
    depends_on:
      - backend
    restart: always
    networks:
      - proxy # Conectamos el frontend a la misma red de Traefik
    # --- 3. AÑADIMOS LABELS (ETIQUETAS) PARA TRAEFIK ---
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`chatbot.localhost`)" # URL para acceder
      - "traefik.http.routers.frontend.entrypoints=web"
      - "traefik.http.services.frontend.loadbalancer.server.port=8501" # Puerto interno del frontend

volumes:
  qdrant_data:

# --- 4. DEFINIMOS LA RED COMPARTIDA ---
networks:
  proxy:
    driver: bridge