# docker-compose.yml

services:
  # Nuevo servicio para la base de datos vectorial
  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage

  ingest:
    build:
      context: .
      dockerfile: Dockerfile.backend
    command: python ingest.py
    volumes:
      - .:/app
    environment:
      - OLLAMA_BASE_URL=${OLLAMA_BASE_URL}
      - QDRANT_URL=${QDRANT_URL}
      - QDRANT_COLLECTION_NAME=${QDRANT_COLLECTION_NAME}
      - OLLAMA_EMBEDDING_MODEL=${OLLAMA_EMBEDDING_MODEL}
    depends_on:
      - qdrant # Esperar
      
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    environment:
      - OLLAMA_BASE_URL=${OLLAMA_BASE_URL}
      - QDRANT_URL=${QDRANT_URL}
      - QDRANT_COLLECTION_NAME=${QDRANT_COLLECTION_NAME}
      - OLLAMA_EMBEDDING_MODEL=${OLLAMA_EMBEDDING_MODEL}
      - OLLAMA_GENERATION_MODEL=${OLLAMA_GENERATION_MODEL}
      - OLLAMA_ROUTING_MODEL=${OLLAMA_ROUTING_MODEL}
    depends_on:
      qdrant: # También depende de Qdrant
        condition: service_started
      ingest: # Espera a que la ingesta termine con éxito
        condition: service_completed_successfully

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    ports:
      - "8501:8501"
    volumes:
      - ./frontend.py:/app/frontend.py
    environment:
      - API_URL=http://backend:8000/chat
    depends_on:
      - backend

volumes:
  # Volumen para persistir los datos de Qdrant
  qdrant_data:
